import{aa as c,d as r,ea as l,va as f}from"./chunk-ZERM447T.js";var d=class o{consoleOutput;attach(e){this.consoleOutput=e.nativeElement}addConsoleLine(e){if(!this.consoleOutput)return;let t=new Date().toLocaleTimeString("en-US",{hour12:!1}),n=document.createElement("div");n.textContent=`[${t}] ${e}`,this.consoleOutput.insertBefore(n,this.consoleOutput.firstChild)}static \u0275fac=function(i){return new(i||o)};static \u0275prov=c({token:o,factory:o.\u0275fac,providedIn:"root"})};var v=class o{constructor(e){this.consoleService=e}isConnected=f(!1);hasAvailableDevice=f(!1);reading=!1;lineQueue=[];waitingResolvers=[];MAX_QUEUE_SIZE=100;device;interfaceNumber=0;endpointOut=0;endpointIn=0;configurationValue=1;requestAndConnectDevice(){return r(this,null,function*(){yield this.requestDevice(),yield this.connect()})}requestDevice(){return r(this,null,function*(){try{this.device=yield navigator.usb.requestDevice({filters:[{vendorId:12346}]})}catch(e){console.error("USB device request failed:",e)}yield this.checkAvailableDevice()})}checkAvailableDevice(){return r(this,null,function*(){let e=yield navigator.usb.getDevices();this.hasAvailableDevice.set(e.length>0)})}autoConnect(){return r(this,null,function*(){let e=yield navigator.usb.getDevices();if(e.length===0)return!1;this.device=e[0],yield this.device.open(),this.device.configuration===null&&(yield this.device.selectConfiguration(this.configurationValue));let i=this.findCDCInterfaceAndEndpoints();if(!i)throw new Error("No suitable CDC or vendor interface found");return this.interfaceNumber=i.interfaceNumber,this.endpointIn=i.endpointIn,this.endpointOut=i.endpointOut,yield this.device.claimInterface(this.interfaceNumber),this.isConnected.set(!0),yield this.startListening(),!0})}connect(){return r(this,null,function*(){if(!this.device)return;yield this.device.open(),this.device.configuration===null&&(yield this.device.selectConfiguration(this.configurationValue));let e=this.device.configuration;if(!e)throw new Error("No configuration found");for(let i of e.interfaces)for(let t of i.alternates){let n=t.endpoints.find(a=>a.direction==="in"),s=t.endpoints.find(a=>a.direction==="out");if((t.interfaceClass===10||t.interfaceClass===255)&&n&&s){this.interfaceNumber=i.interfaceNumber,this.endpointIn=n.endpointNumber,this.endpointOut=s.endpointNumber,yield this.device.claimInterface(this.interfaceNumber),this.isConnected.set(!0),yield this.startListening(),yield this.writeLine("CMD=@BRAND;");return}}throw new Error("No suitable CDC or vendor interface found")})}findCDCInterfaceAndEndpoints(){if(!this.device?.configuration?.interfaces)return null;for(let e of this.device.configuration.interfaces)for(let i of e.alternates){let{interfaceClass:t,endpoints:n}=i;if(t===10||t===255){let s=n.find(u=>u.direction==="in")?.endpointNumber,a=n.find(u=>u.direction==="out")?.endpointNumber;if(s!==void 0&&a!==void 0)return{interfaceNumber:e.interfaceNumber,endpointIn:s,endpointOut:a}}}return null}getProperties(){return this.device?[{name:"productName",value:this.device.productName},{name:"productId",value:"0x"+this.device.productId.toString(16).padStart(4,"0")},{name:"vendorId",value:"0x"+this.device.vendorId.toString(16).padStart(4,"0")},{name:"manufacturerName",value:this.device.manufacturerName},{name:"serialNumber",value:this.device.serialNumber},{name:"interfaceNumber",value:this.interfaceNumber},{name:"endpointIn",value:this.endpointIn},{name:"endpointOut",value:this.endpointOut}]:[]}disconnect(){return r(this,null,function*(){if(this.device){yield this.writeLine("CMD=@CLA;");try{this.device.opened&&(yield this.device.releaseInterface(this.interfaceNumber),yield this.device.close())}catch(e){console.warn("Error during disconnect:",e)}finally{this.device=void 0,this.isConnected.set(!1),this.stopListening()}yield this.checkAvailableDevice()}})}write(e){return r(this,null,function*(){this.device&&(yield this.device.transferOut(this.endpointOut,e))})}read(){return r(this,null,function*(){if(!this.device)return;let e=yield this.device.transferIn(this.endpointIn,64);return new Uint8Array(e.data?.buffer||[])})}writeLine(e){return r(this,null,function*(){if(!this.device)return;let i=new TextEncoder,t=e.replace(/;/g,`;
`),n=i.encode(t.endsWith(`
`)?t:t+`
`);yield this.device.transferOut(this.endpointOut,n),this.consoleService.addConsoleLine(e)})}startListening(){return r(this,null,function*(){if(!this.device){console.warn("No USB device connected.");return}this.reading=!0;let e="";for(;this.reading;)try{let i=yield this.device.transferIn(this.endpointIn,64),t=new TextDecoder().decode(i.data?.buffer||new ArrayBuffer(0));e+=t;let n=e.split(`
`);e=n.pop()||"";for(let s of n)this.consoleService.addConsoleLine(s),this.processLine(s.trim())}catch(i){console.error("Error reading from USB:",i),this.reading=!1}})}stopListening(){this.reading=!1}readLine(){return this.lineQueue.length>0?Promise.resolve(this.lineQueue.shift()):this.waitingResolvers.length>=this.MAX_QUEUE_SIZE?Promise.reject(new Error("Too many pending readLine requests.")):new Promise(e=>{this.waitingResolvers.push(e)})}processLine(e){this.waitingResolvers.length>0?this.waitingResolvers.shift()(e):(this.lineQueue.length>=this.MAX_QUEUE_SIZE&&this.lineQueue.shift(),this.lineQueue.push(e))}flushQueues(){this.lineQueue=[],this.waitingResolvers=[]}static \u0275fac=function(i){return new(i||o)(l(d))};static \u0275prov=c({token:o,factory:o.\u0275fac,providedIn:"root"})};export{d as a,v as b};
